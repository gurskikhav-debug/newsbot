import os
import json
import requests
from datetime import datetime, timedelta
from deep_translator import GoogleTranslator
import feedparser

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TOKEN")
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")

# --- –ö–µ—à ---
CACHE_FILE = "cache/news_cache.json"

def load_cache():
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return set(data) if isinstance(data, list) else set()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    return set()

def save_cache(cache_set):
    os.makedirs("cache", exist_ok=True)
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(list(cache_set), f, ensure_ascii=False, indent=2)

# --- –ü–µ—Ä–µ–≤–æ–¥ ---
def translate_text(text):
    try:
        return GoogleTranslator(source='auto', target='ru').translate(text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ---
KEYWORDS_EN = ['technology', 'AI', 'robotics', '3D printing', 'green energy']
KEYWORDS_RU = ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ò–ò', '—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '3D –ø–µ—á–∞—Ç—å', '–∑–µ–ª—ë–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞']
ALL_KEYWORDS = [kw.lower() for kw in KEYWORDS_EN + KEYWORDS_RU]

# --- –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π ---
def search_news():
    articles = []

    # 1. NewsAPI
    if NEWSAPI_KEY:
        try:
            url = "https://newsapi.org/v2/everything"
            params = {
                'q': ' OR '.join(KEYWORDS_EN),
                'language': 'en',
                'sortBy': 'publishedAt',
                'pageSize': 20,
                'apiKey': NEWSAPI_KEY
            }
            r = requests.get(url, params=params, timeout=15)
            if r.status_code == 200:
                data = r.json()
                for item in data.get('articles', []):
                    articles.append({
                        'title': item['title'],
                        'url': item['url'],
                        'source': item['source']['name'],
                        'published': item.get('publishedAt', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    })
            else:
                print(f"NewsAPI error {r.status_code}: {r.text}")
        except Exception as e:
            print(f"NewsAPI –æ—à–∏–±–∫–∞: {e}")

    # 2. RSS ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã (–Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
    # feeds = { ... }

    return articles

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
def send_message(chat_id, text, parse_mode='Markdown', disable_preview=False):
    if not chat_id:
        print("‚ùå chat_id –Ω–µ –∑–∞–¥–∞–Ω")
        return
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode,
            "disable_web_page_preview": not disable_preview
        }
        response = requests.post(url, data=data, timeout=10)
        if response.status_code == 200:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}, {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ä–µ–∂–∏–º GitHub Actions)")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞
    status_msg = "üîç *–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω...*\n"
    status_msg += "‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: NewsAPI (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏)\n"
    status_msg += "‚Ä¢ –¢–µ–º—ã: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ò–ò, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞, 3D –ø–µ—á–∞—Ç—å, –∑–µ–ª—ë–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞\n"
    status_msg += "‚Ä¢ –Ø–∑—ã–∫: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π + —Ä—É—Å—Å–∫–∏–π\n"
    status_msg += "‚Ä¢ –§–∏–ª—å—Ç—Ä –¥—É–±–ª–µ–π: –≤–∫–ª—é—á—ë–Ω\n"
    
    if ADMIN_ID:
        send_message(ADMIN_ID, status_msg, disable_preview=False)

    seen_urls = load_cache()
    raw_articles = search_news()
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(raw_articles)}")

    if not raw_articles:
        error_msg = "‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
        error_msg += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
        error_msg += "‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ\n"
        error_msg += "‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NewsAPI\n"
        error_msg += "‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏–µ"
        if ADMIN_ID:
            send_message(ADMIN_ID, error_msg)
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    filtered_articles = []
    for art in raw_articles:
        title = art['title'].lower()
        if any(kw in title for kw in ALL_KEYWORDS):
            filtered_articles.append(art)

    print(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_articles)}")

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
    articles = [a for a in filtered_articles if a.get('url') not in seen_urls]

    if not articles:
        no_new_msg = "üì≠ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º —Ç–µ–º–∞–º –Ω–µ—Ç.\n"
        no_new_msg += "–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã —Ä–∞–Ω–µ–µ."
        if ADMIN_ID:
            send_message(ADMIN_ID, no_new_msg)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 10
    msg = "üì¨ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç*\n\n"
    for art in articles[:10]:
        title_ru = translate_text(art['title'])
        source = art.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        msg += f"üìå *{title_ru}*\nüåê {source}\nüîó {art['url']}\n\n"

    if ADMIN_ID:
        send_message(ADMIN_ID, msg, disable_preview=False)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    for art in articles:
        url = art.get('url')
        if url:
            seen_urls.add(url)
    save_cache(seen_urls)

    print("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    main()
