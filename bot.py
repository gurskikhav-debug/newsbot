import os
import json
import requests
from datetime import datetime, timedelta
from deep_translator import GoogleTranslator
import feedparser

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TOKEN")
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")

# --- –ö–µ—à ---
CACHE_FILE = "cache/news_cache.json"

def load_cache():
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return set(data) if isinstance(data, list) else set()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    return set()

def save_cache(cache_set):
    os.makedirs("cache", exist_ok=True)
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(list(cache_set), f, ensure_ascii=False, indent=2)

# --- –ü–µ—Ä–µ–≤–æ–¥ ---
def translate_text(text):
    try:
        return GoogleTranslator(source='auto', target='ru').translate(text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Å —É—á—ë—Ç–æ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏) ---
KEYWORDS_EN = [
    'metallurgy', 'ferrous', 'non-ferrous', 'steel', 'metal processing',
    'additive manufacturing', '3D printing', 'AM', 'rapid prototyping',
    'artificial intelligence', 'AI', 'machine learning', 'neural network',
    'robotics', 'robot', 'robots', 'robotic', 'automation', 'autonomous',
    'green energy', 'renewable energy', 'solar', 'wind', 'hydrogen', 'battery',
    'new technologies', 'emerging tech', 'innovation',
    'fun tech', 'gaming tech', 'entertainment technology', 'hobby tech'
]

KEYWORDS_RU = [
    '–º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è', '—á–µ—Ä–Ω–∞—è –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è', '—Ü–≤–µ—Ç–Ω–∞—è –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è',
    '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å—Ç–∞–ª–∏', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–ª–ª–æ–≤', '—Å—Ç–∞–ª—å', '–º–µ—Ç–∞–ª–ª',
    '–∞–¥–¥–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '3D –ø–µ—á–∞—Ç—å', '3D-–ø–µ—á–∞—Ç—å', '–∞–¥–¥–∏—Ç–∏–≤',
    '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ò–ò', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å',
    '—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', '—Ä–æ–±–æ—Ç', '—Ä–æ–±–æ—Ç—ã', '—Ä–æ–±–æ—Ç–∏–∑–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
    '–∑–µ–ª—ë–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', '–≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —ç–Ω–µ—Ä–≥–∏—è', '—Å–æ–ª–Ω–µ—á–Ω–∞—è', '–≤–µ—Ç—Ä–æ–≤–∞—è',
    '–≤–æ–¥–æ—Ä–æ–¥', '–±–∞—Ç–∞—Ä–µ–∏', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã',
    '–Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', '–ø—Ä–æ—Ä—ã–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
    '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è', '–∏–≥—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
    '—Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è —Ö–æ–±–±–∏', 'fun tech'
]

# --- –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è ---
def search_news():
    articles = []

    # 1. NewsAPI ‚Äî —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤
    if NEWSAPI_KEY:
        from_date = (datetime.now() - timedelta(days=3)).strftime('%Y-%m-%d')

        # –ì—Ä—É–ø–ø—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤)
        queries = [
            ' OR '.join(KEYWORDS_EN[:8]),
            ' OR '.join(KEYWORDS_EN[8:16]),
            ' OR '.join(KEYWORDS_EN[16:])
        ]

        for query in queries:
            try:
                url = "https://newsapi.org/v2/everything"
                params = {
                    'q': query,
                    'from': from_date,
                    'language': 'en',
                    'sortBy': 'publishedAt',
                    'pageSize': 20,
                    'apiKey': NEWSAPI_KEY
                }
                r = requests.get(url, params=params, timeout=15)
                if r.status_code == 200:
                    data = r.json()
                    for item in data.get('articles', []):
                        articles.append({
                            'title': item['title'],
                            'url': item['url'],
                            'source': item['source']['name'],
                            'published': item.get('publishedAt', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        })
                else:
                    print(f"NewsAPI error {r.status_code}: {r.text} (query: {query[:50]}...)")
            except Exception as e:
                print(f"NewsAPI –æ—à–∏–±–∫–∞: {e}")

    # 2. RSS –∏–∑ –ö–∏—Ç–∞—è
    try:
        feeds = {
            'xinhua': 'http://www.xinhuanet.com/rss/world.xml',
            'sina': 'https://rss.sina.com.cn/news/china.xml',
            'sohu': 'http://rss.news.sohu.com/rss2/news.xml'
        }
        for name, feed_url in feeds.items():
            try:
                feed = feedparser.parse(feed_url)
                for entry in feed.entries:
                    title = entry.title.lower()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                    if any(kw.lower() in title for kw in ['metal', 'tech', 'ai', 'robot', 'energy', 'green', '3d']):
                        articles.append({
                            'title': entry.title,
                            'url': entry.link,
                            'source': name,
                            'published': entry.get('published', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ RSS {name}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS: {e}")

    return articles

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
def send_message(chat_id, text, parse_mode='Markdown', disable_preview=False):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": disable_preview
    }
    try:
        requests.post(url, data=data, timeout=10)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ä–µ–∂–∏–º GitHub Actions)")
    try:
        seen_urls = load_cache()
        raw_articles = search_news()
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(raw_articles)}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (—Å —É—á—ë—Ç–æ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏)
        filtered_articles = []
        title_lower_cache = [art['title'].lower() for art in raw_articles]
        for i, art in enumerate(raw_articles):
            title = title_lower_cache[i]
            if any(kw.lower() in title for kw in KEYWORDS_RU + KEYWORDS_EN):
                filtered_articles.append(art)

        print(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_articles)}")

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
        articles = [a for a in filtered_articles if a.get('url') not in seen_urls]

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10‚Äì20 –Ω–æ–≤–æ—Å—Ç—è–º–∏
        if len(articles) < 10:
            selected = articles  # –º–µ–Ω—å—à–µ 10 ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ
        else:
            selected = articles[:20]  # –º–∞–∫—Å–∏–º—É–º 20

        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {len(selected)} –Ω–æ–≤–æ—Å—Ç–µ–π")

        if not selected:
            print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = "üì¨ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç*\n\n"
        for art in selected:
            title_ru = translate_text(art['title'])
            source = art.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            msg += f"üìå *{title_ru}*\nüåê {source}\nüîó {art['url']}\n\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        if ADMIN_ID:
            send_message(ADMIN_ID, msg, disable_preview=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        for art in selected:
            url = art.get('url')
            if url:
                seen_urls.add(url)
        save_cache(seen_urls)

        print("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except Exception as e:
        error_msg = f"{type(e).__name__}: {str(e)[:500]}"
        print(f"üî¥ –û—à–∏–±–∫–∞: {error_msg}")
        if ADMIN_ID:
            requests.post(
                f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                data={"chat_id": ADMIN_ID, "text": f"‚ùå –û—à–∏–±–∫–∞: `{error_msg}`"}
            )

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    main()