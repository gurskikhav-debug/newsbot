import os
import json
import requests
from datetime import datetime, timedelta
from deep_translator import GoogleTranslator
import feedparser

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TOKEN")
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")

# --- –ö–µ—à ---
CACHE_FILE = "cache/news_cache.json"

def load_cache():
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return set(data) if isinstance(data, list) else set()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    return set()

def save_cache(cache_set):
    os.makedirs("cache", exist_ok=True)
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(list(cache_set), f, ensure_ascii=False, indent=2)

# --- –ü–µ—Ä–µ–≤–æ–¥ ---
def translate_text(text):
    try:
        return GoogleTranslator(source='auto', target='ru').translate(text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã) ---
KEYWORDS_EN = [
    'metallurgy', 'ferrous metallurgy', 'non-ferrous metallurgy',
    'steel production', 'metal processing', 'additive manufacturing',
    '3D printing metal', 'rare earth metals', 'refractory metals',
    'tungsten', 'molybdenum', 'niobium', 'tantalum', 'titanium', 'vanadium',
    'metal alloys', 'steel alloys', 'titanium alloys', 'superalloys',
    'material properties', 'thermal conductivity', 'mechanical strength',
    'AI in industry', 'industrial automation', 'robotic systems',
    'green hydrogen', 'battery technology', 'energy storage',
    'technical specifications', 'engineering design', 'R&D innovation'
]

KEYWORDS_RU = [
    '–º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è', '—á–µ—Ä–Ω–∞—è –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è', '—Ü–≤–µ—Ç–Ω–∞—è –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è',
    '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å—Ç–∞–ª–∏', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–ª–ª–æ–≤', '—Å—Ç–∞–ª—å', '–º–µ—Ç–∞–ª–ª',
    '–∞–¥–¥–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '3D –ø–µ—á–∞—Ç—å –º–µ—Ç–∞–ª–ª–æ–º', '—Ä–µ–¥–∫–æ–∑–µ–º–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã',
    '—Ç—É–≥–æ–ø–ª–∞–≤–∫–∏–µ –º–µ—Ç–∞–ª–ª—ã', '–≤–æ–ª—å—Ñ—Ä–∞–º', '–º–æ–ª–∏–±–¥–µ–Ω', '–Ω–∏–æ–±–∏–π', '—Ç–∞–Ω—Ç–∞–ª', '—Ç–∏—Ç–∞–Ω',
    '–≤–∞–Ω–∞–¥–∏–π', '—Å–ø–ª–∞–≤—ã –º–µ—Ç–∞–ª–ª–æ–≤', '—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ø–ª–∞–≤—ã', '—Ç–∏—Ç–∞–Ω–æ–≤—ã–µ —Å–ø–ª–∞–≤—ã',
    '—Å—É–ø–µ—Ä—Å–ø–ª–∞–≤—ã', '—Å–≤–æ–π—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', '—Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å', '–ø—Ä–æ—á–Ω–æ—Å—Ç—å',
    '–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞', '–ò–ò –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
    '—Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã', '–∑–µ–ª—ë–Ω—ã–π –≤–æ–¥–æ—Ä–æ–¥', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤',
    '–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –¥–∏–∑–∞–π–Ω',
    '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
]

# --- –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ---
TECHNICAL_SOURCES_EN = [
    'engineering.com', 'ieee.org', 'sciencedirect.com', 'springer.com',
    'nature.com', 'researchgate.net', 'arxiv.org', 'phys.org',
    'machinedesign.com', 'designnews.com', 'sae.org'
]

TECHNICAL_SOURCES_RU = [
    'habr.com', 'nplus1.ru', 'scientificrussia.com', 'vtor-ch.ru',
    'cherepovetsmet.ru', 'metalinfo.ru', 'engineering-spb.ru'
]

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
def send_message(chat_id, text, parse_mode='Markdown', disable_preview=False):
    if not chat_id:
        print("‚ùå chat_id –Ω–µ –∑–∞–¥–∞–Ω")
        return
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode,
            "disable_web_page_preview": not disable_preview
        }
        response = requests.post(url, data=data, timeout=10)
        if response.status_code == 200:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}, {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# --- –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ 3 –¥–Ω—è ---
def search_news():
    articles = []

    # 1. NewsAPI ‚Äî —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤
    if NEWSAPI_KEY:
        from_date = (datetime.now() - timedelta(days=3)).strftime('%Y-%m-%d')

        # –ì—Ä—É–ø–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤)
        queries = [
            ' OR '.join(KEYWORDS_EN[:8]),
            ' OR '.join(KEYWORDS_EN[8:16]),
            ' OR '.join(KEYWORDS_EN[16:])
        ]

        for query in queries:
            try:
                url = "https://newsapi.org/v2/everything"
                params = {
                    'q': query,
                    'from': from_date,
                    'language': 'en',
                    'sortBy': 'publishedAt',
                    'pageSize': 20,
                    'apiKey': NEWSAPI_KEY
                }
                r = requests.get(url, params=params, timeout=15)
                if r.status_code == 200:
                    data = r.json()
                    for item in data.get('articles', []):
                        articles.append({
                            'title': item['title'],
                            'url': item['url'],
                            'source': item['source']['name'],
                            'published': item.get('publishedAt', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            'lang': 'en'
                        })
                else:
                    print(f"NewsAPI error {r.status_code}: {r.text}")
            except Exception as e:
                print(f"NewsAPI –æ—à–∏–±–∫–∞: {e}")

    # 2. RSS –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    try:
        feeds = {
            'habr': 'https://habr.com/ru/rss/technology/',
            'nplus1': 'https://nplus1.ru/rss',
            'engineering': 'https://www.engineering.com/rss'
        }
        for name, feed_url in feeds.items():
            try:
                feed = feedparser.parse(feed_url)
                for entry in feed.entries:
                    title = entry.title.lower()
                    if any(kw.lower() in title for kw in ['metal', 'tech', 'ai', 'alloy', 'engineering']):
                        lang = 'ru' if 'habr' in name or 'nplus1' in name else 'en'
                        articles.append({
                            'title': entry.title,
                            'url': entry.link,
                            'source': name,
                            'published': entry.get('published', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            'lang': lang
                        })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ RSS {name}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS: {e}")

    return articles

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ä–µ–∂–∏–º GitHub Actions)")
    try:
        seen_urls = load_cache()
        raw_articles = search_news()
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(raw_articles)}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        filtered_articles = []
        for art in raw_articles:
            title = art['title'].lower()
            if any(kw.lower() in title for kw in KEYWORDS_RU + KEYWORDS_EN):
                filtered_articles.append(art)

        print(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_articles)}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        def source_priority(article):
            source = article['source'].lower()
            if any(s in source for s in TECHNICAL_SOURCES_EN + TECHNICAL_SOURCES_RU):
                return 0
            return 1

        filtered_articles.sort(key=source_priority)

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
        articles = [a for a in filtered_articles if a.get('url') not in seen_urls]

        # –ë–∞–ª–∞–Ω—Å: 50% RU, 50% EN
        ru_articles = [a for a in articles if a.get('lang') == 'ru']
        en_articles = [a for a in articles if a.get('lang') == 'en']

        # –¶–µ–ª–µ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        target_count = 10
        max_total = 20

        # –î–æ–∫–∞—á–∏–≤–∞–µ–º –¥–æ 10, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
        selected_ru = ru_articles[:target_count]
        selected_en = en_articles[:target_count]

        while len(selected_ru) + len(selected_en) < target_count and (len(ru_articles) > len(selected_ru) or len(en_articles) > len(selected_en)):
            if len(ru_articles) > len(selected_ru):
                selected_ru.append(ru_articles[len(selected_ru)])
            if len(en_articles) > len(selected_en) and len(selected_ru) + len(selected_en) < target_count:
                selected_en.append(en_articles[len(selected_en)])

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20
        selected = (selected_ru + selected_en)[:max_total]

        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {len(selected)} –Ω–æ–≤–æ—Å—Ç–µ–π (50% RU, 50% EN)")

        # --- –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ---
        sources_msg = "üìã *–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:*\n\n"
        sources_msg += "*üá∑üá∫ –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ:*\n"
        for src in TECHNICAL_SOURCES_RU:
            sources_msg += f"‚Ä¢ `{src}`\n"
        sources_msg += "\n*üåç –ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ:*\n"
        for src in TECHNICAL_SOURCES_EN:
            sources_msg += f"‚Ä¢ `{src}`\n"

        if ADMIN_ID:
            try:
                admin_id_int = int(ADMIN_ID)
                send_message(admin_id_int, sources_msg, disable_preview=False)
            except ValueError:
                print(f"‚ùå ADMIN_ID '{ADMIN_ID}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")

        # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å ---
        if selected:
            batch_size = 5
            msg = "üì¨ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)*\n\n"
            for i, art in enumerate(selected, 1):
                title_ru = translate_text(art['title'])
                source = art.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                msg += f"üìå *{title_ru}*\nüåê {source}\nüîó {art['url']}\n\n"

                if i % batch_size == 0 or i == len(selected):
                    if ADMIN_ID:
                        try:
                            admin_id_int = int(ADMIN_ID)
                            send_message(admin_id_int, msg, disable_preview=False)
                        except ValueError:
                            print(f"‚ùå ADMIN_ID '{ADMIN_ID}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
                    msg = ""
                    if i != len(selected):
                        msg = "\n"

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            for art in selected:
                url = art.get('url')
                if url:
                    seen_urls.add(url)
            save_cache(seen_urls)

        else:
            # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if ADMIN_ID:
                no_news_msg = "üì≠ *–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º —Ç–µ–º–∞–º –ø–æ–∫–∞ –Ω–µ—Ç.*\n"
                no_news_msg += "–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫ ‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ 18:00."
                send_message(int(ADMIN_ID), no_news_msg, disable_preview=False)

        print("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except Exception as e:
        error_msg = f"{type(e).__name__}: {str(e)[:500]}"
        print(f"üî¥ –û—à–∏–±–∫–∞: {error_msg}")
        if ADMIN_ID and TOKEN:
            send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞: `{error_msg}`")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    main()
